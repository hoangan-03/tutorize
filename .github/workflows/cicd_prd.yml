name: Production CI/CD
on:
  workflow_run:
    workflows: ["Performance and Security Scan"]
    types:
      - completed

jobs:
  build-and-test:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image for testing
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          tags: tutorize-backend:test
          load: true
          platforms: linux/amd64

      - name: Prepare test environment
        run: |
          echo "Setting up test environment with production database (READ-ONLY)..."
          cat > test.env << EOF
          NODE_ENV=test
          DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_ACCESS_EXPIRES_IN=15m
          JWT_REFRESH_EXPIRES_IN=7d
          BCRYPT_ROUNDS=10
          PORT=3000
          READ_ONLY_MODE=true

          # Email service (dummy values for testing)
          SENDGRID_API_KEY=dummy_sendgrid_key_for_testing
          SENDGRID_FROM_EMAIL=test@example.com
          SENDGRID_FROM_NAME=test-name

          # Cloudinary (dummy values for testing)
          CLOUDINARY_CLOUD_NAME=dummy_cloud_for_testing
          CLOUDINARY_API_KEY=dummy_api_key_for_testing
          CLOUDINARY_API_SECRET=dummy_api_secret_for_testing

          # S3 (dummy values for testing)
          AWS_S3_ACCESS_KEY_ID=dummy_aws_key_for_testing
          AWS_S3_SECRET_ACCESS_KEY=dummy_aws_secret_for_testing
          AWS_S3_REGION=ap-northeast-1
          AWS_S3_BUCKET_NAME=dummy_bucket_for_testing

          FRONTEND_URL=https://annguyen.software

          CORS_ORIGIN=https://annguyen.software,https://www.annguyen.software
          EOF

      - name: Start test container
        run: |
          echo "Starting test container with production database (READ-ONLY)..."
          docker run -d \
            --name tutorize-test-container \
            -p 3001:3000 \
            --env-file test.env \
            tutorize-backend:test

          # Check if container started successfully
          echo "Checking container status..."
          docker ps -a | grep tutorize-test-container

          # Show container logs (first few lines)
          echo "Container startup logs:"
          sleep 5
          docker logs tutorize-test-container

      - name: Wait for test application to be ready
        run: |
          echo "Waiting for test application to be ready..."
          # Wait for the application to start up with production database
          for i in {1..30}; do
            echo "Attempt $i: Checking if API is ready..."
            
            # Check if container is still running first
            if ! docker ps | grep -q tutorize-test-container; then
              echo "‚ùå Container has stopped running! Checking logs..."
              docker logs tutorize-test-container
              exit 1
            fi
            
            # Try the simpler endpoint first (no database check)
            if curl -f -s http://localhost:3001/api/v1 2>/dev/null | grep -q "success"; then
              echo "‚úÖ API is ready!"
              # Verify health endpoint also works
              if curl -f -s --max-time 10 http://localhost:3001/api/v1/health 2>/dev/null; then
                echo "‚úÖ Health endpoint also responding!"
              else
                echo "‚ö†Ô∏è Health endpoint timeout/error, but basic API is working"
              fi
              break
            fi
            
            if [ $i -eq 30 ]; then
              echo "‚ùå API health check failed after 30 attempts"
              echo "Container status:"
              docker ps -a | grep tutorize-test-container
              echo ""
              echo "Testing endpoints with verbose output:"
              echo "1. Testing basic endpoint:"
              curl -v http://localhost:3001/api/v1 || true
              echo ""
              echo "2. Testing health endpoint:"
              curl -v --max-time 10 http://localhost:3001/api/v1/health || true
              echo ""
              echo "Container logs:"
              docker logs tutorize-test-container
              echo ""
              echo "Port check:"
              netstat -tlnp | grep 3001 || echo "Port 3001 not listening"
              exit 1
            fi
            sleep 3
          done

      - name: Install Newman
        run: npm install -g newman

      - name: Configure test environment
        run: |
          # Update environment file for local testing (integration-test folder)
          sed -i "s|https://api.annguyen.software/api/v1|http://localhost:3001/api/v1|g" integration-test/postman_environment.json
          sed -i "s/{{TEST_USER_EMAIL}}/${{ secrets.TEST_USER_EMAIL }}/g" integration-test/postman_environment.json
          sed -i "s/{{TEST_USER_PASSWORD}}/${{ secrets.TEST_USER_PASSWORD }}/g" integration-test/postman_environment.json

      - name: Run API Tests with Newman
        run: |
          echo "Running API tests against test container..."
          # Capture container logs periodically while tests run
          (while true; do docker logs --tail 200 tutorize-test-container > container-logs.txt; sleep 5; done) &
          # Use explicit request and script timeouts to avoid callback timed out errors for slow endpoints (PDF, large DB queries)
          set -o pipefail
            newman run integration-test/postman_collection.json \
              --environment integration-test/postman_environment.json \
            --reporters cli,json \
            --reporter-json-export newman-results.json \
            --timeout-request 120000 \
            --timeout-script 120000 \
            --delay-request 300 || true

      - name: Analyze Test Results
        run: |
          echo "Analyzing test results..."
          # Ensure container logs are saved
          docker logs --tail 500 tutorize-test-container > container-logs.txt || true

          if [ -f newman-results.json ]; then
            # Extract test results
            total_requests=$(jq '.run.stats.requests.total' newman-results.json)
            failed_requests=$(jq '.run.stats.requests.failed' newman-results.json)
            total_assertions=$(jq '.run.stats.assertions.total' newman-results.json)
            failed_assertions=$(jq '.run.stats.assertions.failed' newman-results.json)

            echo "üìä Test Results Summary:"
            echo "   Total Requests: $total_requests"
            echo "   Failed Requests: $failed_requests"
            echo "   Total Assertions: $total_assertions"
            echo "   Failed Assertions: $failed_assertions"

            if [ "$failed_assertions" -gt 0 ]; then
              echo "‚ùå Some tests failed - check the detailed results below"
              jq '.run.failures[] | {test: .source.name, error: .error.message, response: .error.stack}' newman-results.json || true
              echo "Container logs (last 500 lines):"
              tail -n 500 container-logs.txt || true
              # Upload artifacts will happen in the artifact step; exit with failure to stop deployment
              exit 1
            else
              echo "‚úÖ All tests passed!"
            fi
          else
            echo "‚ùå Test results file not found - saving container logs for diagnosis"
            tail -n 500 container-logs.txt || true
            exit 1
          fi

      - name: Upload test results and logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: newman-test-results-and-logs
          path: |
            newman-results.json
            container-logs.txt

      - name: Stop test container
        if: always()
        run: |
          docker stop tutorize-test-container || true
          docker rm tutorize-test-container || true

      - name: Build and push Docker image to registry
        if: success()
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tutorize-backend:latest
          no-cache: true
          platforms: linux/amd64

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Starting deployment..."

            # Clean up disk space first
            echo "Cleaning up disk space..."
            docker system prune -a -f

            # Check available space
            echo "Available disk space:"
            df -h

            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tutorize-backend:latest

            echo "Checking new image date:"
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/tutorize-backend:latest

            # Stop and remove the old container
            echo "Stopping old container..."
            docker stop tutorize-backend-container || true
            docker rm tutorize-backend-container || true

            # Run database migrations
            echo "Running database migrations..."
            docker run --rm \
              --env-file /home/ec2-user/.env \
              ${{ secrets.DOCKERHUB_USERNAME }}/tutorize-backend:latest \
              sh -c "npx prisma db push"

            # Run the new container
            echo "Starting new container..."
            docker run \
              -d \
              --name tutorize-backend-container \
              --restart always \
              --env-file /home/ec2-user/.env \
              -p 127.0.0.1:3000:3000 \
              ${{ secrets.DOCKERHUB_USERNAME }}/tutorize-backend:latest

            echo "Deployment successful!"
            echo "Container status:"
            docker ps | grep tutorize-backend-container

            # Final cleanup
            docker image prune -f

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          timeout 60 bash -c 'until curl -f https://api.annguyen.software/api/v1/health 2>/dev/null; do sleep 5; done' || echo "Health check timeout - deployment may need manual verification"
