Tutorize â€” Educational platform
===============================================

## Structure

- Backend: NestJS (TypeScript) API with Prisma ORM, Prisma schema in `backend/prisma/schema.prisma`.
- Frontend: React + Vite (TypeScript) UI in `frontend/`.
- Tests: 
  - Integration tests in `integration-test/` (Postman collection + Newman runner)
  - Load & performance tests in `load-test/k6/` (k6 scripts + Grafana publishing)
- Infrastructure: Dockerfile(s) under `backend/` and GitHub Actions workflows for CI/CD.

## Summary

- Backend: NestJS 10, Postgres (Prisma), JWT auth, Passport, Socket.IO, Puppeteer for PDF generation.
- Frontend: React 19, Vite, Tailwind, React Router, SWR, i18n.
- Storage & Integrations: S3 (AWS SDK), Cloudinary, SendGrid.
- Testing: Jest (unit/e2e), Postman + Newman (integration), k6 (load/performance), OWASP ZAP (security scanning).
- CI/CD: GitHub Actions (build image, launch test container, Newman tests, push to DockerHub, deploy to EC2 via SSH).

## Architecture (high level)

ASCII diagram:

```
	[Users] ---> [Frontend (Vite / React)]
											|
											v (REST / fetch + websockets)
								[Backend - NestJS API]
									|     |        |     
			Prisma ---> |     |        | ---> Socket.IO (real-time)
		 (Postgres)   |     |        |
									|     |        ---> S3 / Cloudinary (file storage)
									|     ---> SendGrid (email)
									---> Puppeteer (PDF generation)

	CI/CD:
	GitHub Actions -> Build Docker image -> Run tests (Newman) -> Push image -> SSH deploy to EC2
```

## Tech stack

| Layer | Technology (primary) | Notes |
|-------|----------------------|-------|
| Backend framework | NestJS 10 | Modular controllers/services, global validation pipe, Swagger at `/api/docs` |
| ORM / DB | Prisma + PostgreSQL | `backend/prisma/schema.prisma` describes domain models (User, Quiz, Exercise, Document, IELTS, Submissions) |
| Auth | JWT, Passport | `@nestjs/jwt`, `passport-jwt` used for auth and role-based access (Role: TEACHER/STUDENT) |
| Frontend | React 19 + Vite | `frontend/src` with contexts, hooks, and pages; i18n configured (`frontend/src/i18n`) |
| Real-time | Socket.IO | For notifications / live features |
| File processing | Puppeteer, sharp | PDF generation and image processing |
| Storage | AWS S3 (SDK), Cloudinary | File uploads/document hosting |
| Email | SendGrid | For notifications and reports |
| Testing | Jest, Supertest, Postman/Newman | Unit, e2e, and integration testing in CI |

## Key features

- Authentication & Authorization: JWT tokens, `auth` module, protected routes.
- Users: listing, stats, roles (teacher/student), profile.
- Quizzes: create/manage quizzes, questions, submissions, grading, statistics.
- Exercises: create/manage exercises, student submissions, file attachments.
- Documents: upload and serve document library (PDFs, presentations, etc.).
- IELTS modules: Reading and Writing tests, teacher review workflows, AI/human scoring structure for writing.
- PDF generation: endpoints to render exercise/quiz PDFs (uses Puppeteer).
- Uploads: S3/Cloudinary integration, file metadata management.

## Project layout

- `backend/` - NestJS application
	- `src/main.ts` - app bootstrap, Swagger, global pipes, middleware
	- `src/app.module.ts` - module composition (Auth, Users, Quiz, Exercise, Document, IELTS, PDF)
	- `prisma/schema.prisma` - DB schema and domain models
	- `scripts/` - helper scripts (seed, drop-db)
	- `Dockerfile` - container image for backend
- `frontend/` - React + Vite app
	- `src/` - App, pages, components, contexts, hooks
	- `vite.config.ts` - Vite configuration (if present)
- `integration-test/` - Production-safe API integration tests
	- `postman_collection.json` - Postman collection (Newman runnable)
	- `postman_environment.json` - Postman environment variables
- `load-test/k6/` - Performance and load testing
	- `load-test.js` - k6 load test script
	- `publish-to-grafana.js` - Script to publish k6 metrics to Grafana
- `.github/workflows/` - GitHub Actions CI/CD
	- `deploy.yml` - Main pipeline (build, integration test, push, deploy)
	- `perf-security.yml` - Performance & security checks (k6, ZAP, Grafana publishing)

## Developer local quickstart

Prerequisites: Node.js (>=18), pnpm/npm, Docker (for simulating production), PostgreSQL (or a remote DB), and `npx`.

Backend (from `backend/`):

```powershell
cd backend
npm install
# build
npm run build
# run dev
npm run start:dev
```

Frontend (from `frontend/`):

```powershell
cd frontend
npm install
npm run dev
```

Database & Prisma:

```powershell
cd backend
# run migrations from fresh
npm run migrate:fresh
# or push (non-migration) schema
npm run migrate
# seed test data
npm run seed
```

API docs (after backend started):
- Swagger UI: `http://localhost:3000/api/docs`

Environment variables (important)
- `DATABASE_URL` - PostgreSQL connection string
- `JWT_SECRET`, `JWT_EXPIRES_IN` - auth config
- `AWS_S3_*`, `CLOUDINARY_*` - file storage
- `SENDGRID_API_KEY` - email
- `PORT` - server port

See `.github/workflows/deploy.yml` for an example `test.env` assembled during CI (read-only production DB usage for tests).

## Testing

- **Unit & integration**: `npm test` (runs Jest) in `backend/`.
- **End-to-end / production-safe API tests**: Postman collection in `integration-test/postman_collection.json`. Run locally with Newman:

```powershell
# install newman globally or use npx
npx newman run integration-test/postman_collection.json --environment integration-test/postman_environment.json \
	--timeout-request 120000 --timeout-script 120000 --delay-request 300 --reporters cli,json --reporter-json-export newman-results.json
```

- **Load & performance testing**: k6 scripts in `load-test/k6/`. Run locally with Docker:

```powershell
# Run load test
docker run --rm -v "$(pwd)":/src -w /src grafana/k6:latest run \
  --vus 10 --duration 30s --out json=load-test/k6/results.json load-test/k6/load-test.js

# Publish results to Grafana (if secrets set)
node load-test/k6/publish-to-grafana.js load-test/k6/results.json
```

- **CI uses GitHub Actions** to build a Docker image, run it (with a read-only production DB URL supplied via secrets), wait for health to pass, then run Newman tests. Failing assertions cause the job to fail and upload `newman-results.json` as an artifact.

## CI/CD pipeline

The CI/CD pipeline consists of two GitHub Actions workflows:

### 1. Performance & Security Checks (`.github/workflows/perf-security.yml`)
Runs performance and security tests before deployment:

1. Checkout repository.
2. Build Docker image for the backend using `backend/Dockerfile` (tag: `tutorize-backend:perf`).
3. Start a test container exposing the API on `localhost:3002`.
4. Wait and poll the `/api/v1/health` endpoint until ready.
5. Run k6 load tests with configurable VUs and duration, output JSON results.
6. Upload k6 results as artifacts.
7. Publish k6 metrics to Grafana (optional, if `GRAFANA_PUSH_URL` and `GRAFANA_API_KEY` secrets are set).
8. Run OWASP ZAP baseline security scan (dockerized).
9. Upload ZAP security report as artifacts.
10. Stop test container.

**Triggers**: Manual dispatch or push to `master`.

### 2. Build & Deploy (`.github/workflows/deploy.yml`)
The main deployment pipeline that runs after perf-security completes:

1. Checkout repository.
2. Build Docker image for the backend using `backend/Dockerfile` (tag: `tutorize-backend:test`).
3. Prepare a `test.env` file in the runner with important production-like environment variables (in CI this pulls values from GitHub Secrets such as `PROD_DATABASE_URL`, `JWT_SECRET`, `TEST_USER_*`). The workflow intentionally uses `READ_ONLY_MODE=true` for safety when pointing at production DB.
4. Start a test container exposing the API on `localhost:3001`.
5. Wait and poll the `/api/v1/health` endpoint until ready (with retry loop).
6. Install Newman and run the Postman collection from `integration-test/` against the running container. The workflow exports `newman-results.json` and uploads it as an artifact.
7. If tests pass, build and push the Docker image to Docker Hub, then SSH to EC2 and deploy (pull image, run migrations, start container).

**Triggers**: Push to `master` or completion of perf-security workflow (temporary chaining for testing).

## License

Copyright (c) 2025 An Nguyen. All Rights Reserved.

---

