generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  role        Role      @default(STUDENT)
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  profile                  UserProfile?
  quizzesCreated           Quiz[]                   @relation("QuizCreator")
  quizSubmissions          QuizSubmission[]
  exercisesCreated         Exercise[]               @relation("ExerciseCreator")
  exerciseSubmissions      ExerciseSubmission[]
  documentsUploaded        Document[]               @relation("DocumentUploader")
  ieltsReadingTestsCreated IeltsReadingTest[]       @relation("IeltsReadingTestCreator")
  ieltsReadingSubmissions  IeltsReadingSubmission[]
  ieltsWritingTests        IeltsWritingTest[]       @relation("IeltsWritingTestCreator")
  ieltsWritingSubmissions  IeltsWritingSubmission[]

  @@map("users")
}

model UserProfile {
  id     Int @id @default(autoincrement())
  userId Int @unique

  avatar String?
  grade  Int?

  firstName   String?
  lastName    String?
  phone       String?
  dateOfBirth DateTime?
  address     String?
  school      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum Role {
  TEACHER
  STUDENT
}

enum Subject {
  MATH
  PHYSICS
  LITERATURE
  CHEMISTRY
  BIOLOGY
  NATURAL_SCIENCE
  ENGLISH
  HISTORY
  GEOGRAPHY
  CIVICS
  CAREER_GUIDANCE
  LOCAL_STUDIES
  ECONOMICS_LAW
  TECHNOLOGY
  ART
  MUSIC
}

model Quiz {
  id                             Int        @id @default(autoincrement())
  title                          String
  description                    String     @db.Text
  subject                        Subject
  grade                          Int
  timeLimit                      Int // minutes
  deadline                       DateTime
  status                         QuizStatus @default(DRAFT)
  createdBy                      Int
  totalQuestions                 Int        @default(0)
  totalSubmissions               Int        @default(0)
  averageScore                   Float      @default(0)
  tags                           String[]
  instructions                   String?    @db.Text
  maxAttempts                    Int        @default(1) // number of times user can take quiz
  isAllowedReviewed              Boolean    @default(false) // can review quiz after submit
  isAllowedViewAnswerAfterSubmit Boolean    @default(false) // can view correct answers after submit
  shuffleQuestions               Boolean    @default(false) // randomize question order
  shuffleAnswers                 Boolean    @default(false) // randomize answer options
  createdAt                      DateTime   @default(now())
  updatedAt                      DateTime   @updatedAt

  creator     User             @relation("QuizCreator", fields: [createdBy], references: [id])
  questions   Question[]
  submissions QuizSubmission[]

  @@map("quizzes")
}

model Question {
  id            Int          @id @default(autoincrement())
  quizId        Int
  question      String       @db.Text
  type          QuestionType
  options       String[]     @default([])
  correctAnswer String       @default("")
  points        Int          @default(1)
  explanation   String?      @db.Text
  order         Int
  imageUrl      String?
  audioUrl      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@map("questions")
}

model QuizSubmission {
  id            Int              @id @default(autoincrement())
  quizId        Int
  userId        Int
  attemptNumber Int              @default(1) // which attempt this is (1st, 2nd, etc.)
  score         Float            @default(0)
  totalPoints   Float            @default(0)
  timeSpent     Int              @default(0) // seconds
  submittedAt   DateTime         @default(now())
  gradedAt      DateTime?
  feedback      String?          @db.Text
  status        SubmissionStatus @default(SUBMITTED)

  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@unique([quizId, userId, attemptNumber])
  @@map("quiz_submissions")
}

model QuizAnswer {
  id           Int      @id @default(autoincrement())
  submissionId Int
  questionId   Int
  userAnswer   String   @default("")
  isCorrect    Boolean  @default(false)
  pointsEarned Float    @default(0)
  timeTaken    Int      @default(0) // seconds
  createdAt    DateTime @default(now())

  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

enum QuizStatus {
  ACTIVE
  INACTIVE
  DRAFT
  OVERDUE
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  ESSAY
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
  LATE
}

model Exercise {
  id                  Int            @id @default(autoincrement())
  name                String
  description         String?        @db.Text
  subject             Subject
  grade               Int
  deadline            DateTime
  note                String?        @db.Text
  content             String         @db.Text
  createdBy           Int
  submissions         Int            @default(0)
  status              ExerciseStatus @default(DRAFT)
  maxScore            Float          @default(100)
  allowLateSubmission Boolean        @default(false)
  isPublic            Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  creator             User                 @relation("ExerciseCreator", fields: [createdBy], references: [id])
  attachments         ExerciseAttachment[]
  exerciseSubmissions ExerciseSubmission[]

  @@map("exercises")
}

model ExerciseAttachment {
  id           Int      @id @default(autoincrement())
  exerciseId   Int
  fileName     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_attachments")
}

model ExerciseSubmission {
  id            Int              @id @default(autoincrement())
  exerciseId    Int
  userId        Int
  submissionUrl Json             @default("{}") // JSON array of Google Drive links
  score         Float?
  feedback      String?          @db.Text
  submittedAt   DateTime         @default(now())
  gradedAt      DateTime?
  gradedBy      Int?
  status        SubmissionStatus @default(SUBMITTED)
  version       Int              @default(1)

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exercise_submissions")
}

enum ExerciseStatus {
  DRAFT
  ACTIVE
  INACTIVE
  OVERDUE
}

model Document {
  id            Int          @id @default(autoincrement())
  title         String
  description   String       @db.Text
  subject       Subject
  grade         Int
  type          DocumentType
  fileUrl       String
  fileSize      Int
  downloadCount Int          @default(0)
  tags          String[]     @default([])
  uploadedBy    Int
  isApproved    Boolean      @default(false)
  approvedBy    Int?
  approvedAt    DateTime?
  uploadedAt    DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  uploader User @relation("DocumentUploader", fields: [uploadedBy], references: [id])

  @@map("documents")
}

enum DocumentType {
  PDF
  PRESENTATION
  WORD
}

model IeltsReadingTest {
  id           Int        @id @default(autoincrement())
  title        String
  description  String     @db.Text
  level        IeltsLevel
  timeLimit    Int // minutes
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  instructions String?    @db.Text

  sections    IeltsReadingSection[]
  submissions IeltsReadingSubmission[]
  creator     User                     @relation("IeltsReadingTestCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  createdBy   Int

  @@map("ielts_reading_tests")
}

model IeltsReadingSection {
  id           Int      @id @default(autoincrement())
  testId       Int
  title        String
  instructions String   @db.Text
  timeLimit    Int // minutes
  order        Int
  passageText  String?  @db.Text
  imageUrl     String? // for diagrams
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  test      IeltsReadingTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions IeltsReadingQuestion[]

  @@map("ielts_reading_sections")
}

model IeltsReadingQuestion {
  id             Int                      @id @default(autoincrement())
  sectionId      Int
  question       String                   @db.Text
  type           IeltsReadingQuestionType
  subQuestions   String[]                 @default([]) // For matching questions
  options        String[]                 @default([])
  correctAnswers String[]                 @default([])
  order          Int
  imageUrl       String?
  points         Int                      @default(1)
  explanation    String?                  @db.Text
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt

  section IeltsReadingSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers IeltsReadingAnswer[]

  @@map("ielts_reading_questions")
}

model IeltsReadingSubmission {
  id             Int       @id @default(autoincrement())
  testId         Int
  userId         Int
  score          Float     @default(0) // band score (0-9)
  detailedScores Json      @default("{}")
  feedback       String    @db.Text
  submittedAt    DateTime  @default(now())
  gradedAt       DateTime?

  test    IeltsReadingTest     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers IeltsReadingAnswer[]

  @@map("ielts_reading_submissions")
}

model IeltsReadingAnswer {
  id           Int      @id @default(autoincrement())
  submissionId Int
  questionId   Int
  userAnswer   String   @default("")
  isCorrect    Boolean  @default(false)
  createdAt    DateTime @default(now())

  submission IeltsReadingSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   IeltsReadingQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("ielts_reading_answers")
}

enum IeltsLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum IeltsReadingQuestionType {
  MULTIPLE_CHOICE
  IDENTIFYING_INFORMATION // True/False/Not Given, Yes/No/Not Given
  MATCHING // Matching headings, features, sentence endings
  COMPLETION // Sentence, summary, note, table, flow-chart completion
  SHORT_ANSWER
}

enum IeltsWritingType {
  IELTS_TASK1
  IELTS_TASK2
}

model IeltsWritingTest {
  id        Int              @id @default(autoincrement())
  title     String
  prompt    String           @db.Text
  type      IeltsWritingType
  level     IeltsLevel
  createdBy Int
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  creator     User                     @relation("IeltsWritingTestCreator", fields: [createdBy], references: [id])
  submissions IeltsWritingSubmission[]

  @@map("ielts_writing_tests")
}

model IeltsWritingSubmission {
  id            Int       @id @default(autoincrement())
  taskId        Int
  userId        Int
  content       String    @db.Text
  submittedAt   DateTime  @default(now())
  gradedAt      DateTime?
  aiScore       Json?
  aiFeedback    Json?
  humanScore    Json?
  humanFeedback Json?

  task IeltsWritingTest @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("ielts_writing_submissions")
}
