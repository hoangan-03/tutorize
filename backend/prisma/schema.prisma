generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT
// ============================================================================

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String
  role        Role      @default(STUDENT)
  avatar      String?
  grade       Int?
  subject     Subject?
  isActive    Boolean   @default(true)
  isVerified  Boolean   @default(false)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  profile             UserProfile?
  quizzesCreated      Quiz[]               @relation("QuizCreator")
  quizSubmissions     QuizSubmission[]
  exercisesCreated    Exercise[]           @relation("ExerciseCreator")
  exerciseSubmissions ExerciseSubmission[]
  documentsUploaded   Document[]           @relation("DocumentUploader")
  documentAccesses    DocumentAccess[]
  ieltsTestsCreated   IeltsTest[]          @relation("IeltsTestCreator")
  ieltsSubmissions    IeltsSubmission[]
  writingAssessments  WritingAssessment[]
  notifications       Notification[]
  systemLogs          SystemLog[]

  @@map("users")
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  firstName   String?
  lastName    String?
  phone       String?
  dateOfBirth DateTime?
  address     String?
  school      String?
  preferences Json      @default("{}")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

enum Role {
  TEACHER
  STUDENT
}

enum Subject {
  MATH
  PHYSICS
  LITERATURE
  CHEMISTRY
  BIOLOGY
  NATURAL_SCIENCE
  ENGLISH
  HISTORY
  GEOGRAPHY
  CIVICS
  CAREER_GUIDANCE
  LOCAL_STUDIES
  ECONOMICS_LAW
  TECHNOLOGY
  ART
  MUSIC
}

// ============================================================================
// QUIZ SYSTEM
// ============================================================================

model Quiz {
  id                             Int        @id @default(autoincrement())
  title                          String
  description                    String     @db.Text
  subject                        Subject
  grade                          Int
  timeLimit                      Int // minutes
  deadline                       DateTime
  status                         QuizStatus @default(DRAFT)
  createdBy                      Int
  totalQuestions                 Int        @default(0)
  totalSubmissions               Int        @default(0)
  averageScore                   Float      @default(0)
  isPublic                       Boolean    @default(false)
  tags                           String[]
  instructions                   String?    @db.Text
  maxAttempts                    Int        @default(1) // number of times user can take quiz
  isAllowedReviewed              Boolean    @default(false) // can review quiz after submit
  isAllowedViewAnswerAfterSubmit Boolean    @default(false) // can view correct answers after submit
  showResultsImmediately         Boolean    @default(true) // show results right after submit
  shuffleQuestions               Boolean    @default(false) // randomize question order
  shuffleAnswers                 Boolean    @default(false) // randomize answer options
  createdAt                      DateTime   @default(now())
  updatedAt                      DateTime   @updatedAt

  creator     User             @relation("QuizCreator", fields: [createdBy], references: [id])
  questions   Question[]
  submissions QuizSubmission[]

  @@map("quizzes")
}

model Question {
  id            Int          @id @default(autoincrement())
  quizId        Int
  question      String       @db.Text
  type          QuestionType
  options       String[]     @default([])
  correctAnswer String       @default("")
  points        Int          @default(1)
  explanation   String?      @db.Text
  order         Int
  imageUrl      String?
  audioUrl      String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@map("questions")
}

model QuizSubmission {
  id            Int              @id @default(autoincrement())
  quizId        Int
  userId        Int
  attemptNumber Int              @default(1) // which attempt this is (1st, 2nd, etc.)
  score         Float            @default(0)
  totalPoints   Float            @default(0)
  timeSpent     Int              @default(0) // seconds
  submittedAt   DateTime         @default(now())
  gradedAt      DateTime?
  feedback      String?          @db.Text
  status        SubmissionStatus @default(SUBMITTED)

  // Relations
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers QuizAnswer[]

  @@unique([quizId, userId, attemptNumber])
  @@map("quiz_submissions")
}

model QuizAnswer {
  id           Int      @id @default(autoincrement())
  submissionId Int
  questionId   Int
  userAnswer   String   @default("")
  isCorrect    Boolean  @default(false)
  pointsEarned Float    @default(0)
  timeTaken    Int      @default(0) // seconds
  createdAt    DateTime @default(now())

  // Relations
  submission QuizSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("quiz_answers")
}

enum QuizStatus {
  DRAFT
  ACTIVE
  CLOSED
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_BLANK
  ESSAY
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  GRADED
  IN_PROGRESS
  LATE
}

// ============================================================================
// EXERCISE SYSTEM
// ============================================================================

model Exercise {
  id                  Int            @id @default(autoincrement())
  name                String
  description         String?        @db.Text
  subject             Subject
  grade               Int
  deadline            DateTime
  note                String?        @db.Text
  content             String         @db.Text
  latexContent        String?        @db.Text
  createdBy           Int
  submissions         Int            @default(0)
  status              ExerciseStatus @default(DRAFT)
  maxScore            Float          @default(100)
  allowLateSubmission Boolean        @default(false)
  isPublic            Boolean        @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  // Relations
  creator             User                 @relation("ExerciseCreator", fields: [createdBy], references: [id])
  attachments         ExerciseAttachment[]
  exerciseSubmissions ExerciseSubmission[]
  rubric              GradingRubric?

  @@map("exercises")
}

model ExerciseAttachment {
  id           Int      @id @default(autoincrement())
  exerciseId   Int
  fileName     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())

  // Relations
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("exercise_attachments")
}

model ExerciseSubmission {
  id          Int              @id @default(autoincrement())
  exerciseId  Int
  userId      Int
  content     String           @db.Text
  score       Float?
  feedback    String?          @db.Text
  submittedAt DateTime         @default(now())
  gradedAt    DateTime?
  gradedBy    Int?
  status      SubmissionStatus @default(SUBMITTED)
  version     Int              @default(1)

  // Relations
  exercise    Exercise               @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments SubmissionAttachment[]

  @@map("exercise_submissions")
}

model SubmissionAttachment {
  id           Int      @id @default(autoincrement())
  submissionId Int
  fileName     String
  originalName String
  mimeType     String
  size         Int
  url          String
  uploadedAt   DateTime @default(now())

  // Relations
  submission ExerciseSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_attachments")
}

model GradingRubric {
  id          Int      @id @default(autoincrement())
  exerciseId  Int      @unique
  criteria    Json     @default("[]")
  totalPoints Float    @default(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("grading_rubrics")
}

enum ExerciseStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

// ============================================================================
// DOCUMENT LIBRARY
// ============================================================================

model Document {
  id            Int          @id @default(autoincrement())
  title         String
  description   String       @db.Text
  subject       Subject
  grade         Int
  type          DocumentType
  fileUrl       String
  thumbnailUrl  String?
  fileSize      Int
  duration      Int? // for video/audio
  downloadCount Int          @default(0)
  viewCount     Int          @default(0)
  tags          String[]     @default([])
  uploadedBy    Int
  isPublic      Boolean      @default(false)
  isApproved    Boolean      @default(false)
  approvedBy    Int?
  approvedAt    DateTime?
  uploadedAt    DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  uploader User             @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  accesses DocumentAccess[]

  @@map("documents")
}

model DocumentAccess {
  id         Int          @id @default(autoincrement())
  documentId Int
  userId     Int
  action     AccessAction
  accessedAt DateTime     @default(now())
  ipAddress  String?
  userAgent  String?

  // Relations
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_accesses")
}

enum DocumentType {
  PDF
  VIDEO
  IMAGE
  PRESENTATION
  WORD
}

enum AccessAction {
  VIEW
  DOWNLOAD
  SHARE
}

// ============================================================================
// IELTS SYSTEM
// ============================================================================

model IeltsTest {
  id           Int        @id @default(autoincrement())
  title        String
  description  String     @db.Text
  skill        IeltsSkill
  level        IeltsLevel
  timeLimit    Int // minutes
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  instructions String?    @db.Text

  // Relations
  sections    IeltsSection[]
  submissions IeltsSubmission[]
  creator     User              @relation("IeltsTestCreator", fields: [createdBy], references: [id])
  createdBy   Int

  @@map("ielts_tests")
}

model IeltsSection {
  id           Int      @id @default(autoincrement())
  testId       Int
  title        String
  instructions String   @db.Text
  timeLimit    Int // minutes
  order        Int
  passageText  String?  @db.Text // for reading
  audioUrl     String? // for listening
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  test      IeltsTest       @relation(fields: [testId], references: [id], onDelete: Cascade)
  questions IeltsQuestion[]

  @@map("ielts_sections")
}

model IeltsQuestion {
  id            Int               @id @default(autoincrement())
  sectionId     Int
  question      String            @db.Text
  type          IeltsQuestionType
  options       String[]          @default([])
  correctAnswer String            @default("")
  order         Int
  imageUrl      String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  section IeltsSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  answers IeltsAnswer[]

  @@map("ielts_questions")
}

model IeltsSubmission {
  id             Int        @id @default(autoincrement())
  testId         Int
  userId         Int
  skill          IeltsSkill
  score          Float      @default(0) // band score (0-9)
  detailedScores Json       @default("{}")
  feedback       String     @db.Text
  submittedAt    DateTime   @default(now())
  gradedAt       DateTime?
  audioRecording String? // for speaking

  // Relations
  test    IeltsTest     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers IeltsAnswer[]

  @@map("ielts_submissions")
}

model IeltsAnswer {
  id           Int      @id @default(autoincrement())
  submissionId Int
  questionId   Int
  userAnswer   String   @default("")
  isCorrect    Boolean  @default(false)
  createdAt    DateTime @default(now())

  // Relations
  submission IeltsSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  question   IeltsQuestion   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("ielts_answers")
}

enum IeltsSkill {
  READING
  WRITING
  LISTENING
  SPEAKING
}

enum IeltsLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum IeltsQuestionType {
  MULTIPLE_CHOICE
  FILL_BLANK
  MATCHING
  TRUE_FALSE_NOT_GIVEN
  ESSAY
}

// ============================================================================
// WRITING GRADER (AI)
// ============================================================================

model WritingAssessment {
  id          Int         @id @default(autoincrement())
  userId      Int
  title       String
  content     String      @db.Text
  type        WritingType
  prompt      String?     @db.Text
  wordCount   Int         @default(0)
  aiScore     Json        @default("{}")
  humanScore  Json?
  feedback    Json        @default("{}")
  submittedAt DateTime    @default(now())
  gradedAt    DateTime    @default(now())
  isPublic    Boolean     @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("writing_assessments")
}

enum WritingType {
  ESSAY
  IELTS_TASK1
  IELTS_TASK2
  CREATIVE
  ACADEMIC
}

// ============================================================================
// SYSTEM FEATURES
// ============================================================================

model Notification {
  id        Int              @id @default(autoincrement())
  userId    Int
  title     String
  message   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false)
  data      Json?            @default("{}")
  createdAt DateTime         @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model SystemLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  action    String
  resource  String
  details   Json     @default("{}")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("system_logs")
}

model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String   @db.Text
  description String?  @db.Text
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  QUIZ_ASSIGNED
  EXERCISE_ASSIGNED
  GRADE_RELEASED
  DEADLINE_REMINDER
}
