# Workflow name
name: Deploy NestJS App to EC2 via Docker

# Define the trigger event for the workflow
on:
  push:
    branches:
      - master  # Only run on push to the master branch

# Define the jobs to be executed
jobs:
  build-and-deploy:
    # Use the latest Ubuntu virtual machine provided by GitHub
    runs-on: ubuntu-latest

    # Steps to be executed
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/tutorize-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          
          script: |
            # Pull the latest code from GitHub (for reference)
            cd /home/ubuntu/tutorize-backend || git clone https://github.com/hoangan-03/tutorize.git tutorize-backend
            cd /home/ubuntu/tutorize-backend
            git pull origin master
            
            # Pull the latest Docker image (built from latest code)
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/tutorize-backend:latest
            
            # Stop and remove existing container
            echo "Stopping existing container..."
            docker stop tutorize-backend || true
            docker rm tutorize-backend || true
            
            # Run new container with updated image
            echo "Starting new container..."
            docker run -d \
              --name tutorize-backend \
              -p 3000:3000 \
              --env-file /home/ubuntu/.env \
              --restart unless-stopped \
              ${{ secrets.DOCKER_USERNAME }}/tutorize-backend:latest
            
            # Clean up old images to save space
            docker image prune -f
            
            echo "Deployment successful!"