// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String  @id @default(cuid())
    email     String  @unique
    username  String  @unique
    password  String
    firstName String?
    lastName  String?
    avatar    String?

    // User preferences
    language String @default("en") // en, vi
    theme    String @default("dark") // light, dark
    timezone String @default("UTC")

    // Account status
    isActive    Boolean   @default(true)
    isVerified  Boolean   @default(false)
    lastLoginAt DateTime?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    wallets    VirtualWallet[]
    portfolios Portfolio[]
    orders     Order[]
    trades     Trade[]
    watchlists Watchlist[]
    apiKeys    ApiKey[]

    @@map("users")
}

model VirtualWallet {
    id     String @id @default(cuid())
    userId String

    // Wallet details
    name        String  @default("Main Wallet")
    description String?

    // Virtual balances (in USD for simplicity)
    usdBalance Decimal @default(100000.00) @db.Decimal(20, 8) // Start with $100k virtual
    totalValue Decimal @default(100000.00) @db.Decimal(20, 8)

    // Performance tracking
    totalPnL        Decimal @default(0.00) @db.Decimal(20, 8)
    totalPnLPercent Decimal @default(0.00) @db.Decimal(10, 4)
    dayPnL          Decimal @default(0.00) @db.Decimal(20, 8)
    dayPnLPercent   Decimal @default(0.00) @db.Decimal(10, 4)

    // Statistics
    totalTrades   Int     @default(0)
    winningTrades Int     @default(0)
    losingTrades  Int     @default(0)
    winRate       Decimal @default(0.00) @db.Decimal(5, 4)

    // Status
    isActive Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    holdings Holding[]
    orders   Order[]
    trades   Trade[]

    @@map("virtual_wallets")
}

model Cryptocurrency {
    id String @id @default(cuid())

    // Basic info
    coinId String @unique // coingecko id
    symbol String
    name   String

    // Market data (updated periodically)
    currentPrice       Decimal? @db.Decimal(20, 8)
    marketCap          Decimal? @db.Decimal(30, 2)
    volume24h          Decimal? @db.Decimal(30, 2)
    priceChange24h     Decimal? @db.Decimal(10, 4)
    priceChangePercent Decimal? @db.Decimal(10, 4)

    // Additional info
    image       String?
    description String?
    website     String?

    // Status
    isActive    Boolean @default(true)
    isSupported Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    holdings     Holding[]
    orders       Order[]
    trades       Trade[]
    priceHistory PriceHistory[]
    watchlists   WatchlistItem[]

    @@map("cryptocurrencies")
}

model Holding {
    id       String @id @default(cuid())
    walletId String
    cryptoId String

    // Position details
    quantity     Decimal @db.Decimal(20, 8)
    averagePrice Decimal @db.Decimal(20, 8)
    totalCost    Decimal @db.Decimal(20, 8)
    currentValue Decimal @db.Decimal(20, 8)

    // Performance
    unrealizedPnL        Decimal @db.Decimal(20, 8)
    unrealizedPnLPercent Decimal @db.Decimal(10, 4)
    realizedPnL          Decimal @default(0.00) @db.Decimal(20, 8)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    wallet VirtualWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)
    crypto Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)

    @@unique([walletId, cryptoId])
    @@map("holdings")
}

model Order {
    id       String @id @default(cuid())
    userId   String
    walletId String
    cryptoId String

    // Order details
    type      OrderType // BUY, SELL
    orderType OrderKind // MARKET, LIMIT
    status    OrderStatus // PENDING, FILLED, CANCELLED, REJECTED

    quantity    Decimal @db.Decimal(20, 8)
    price       Decimal @db.Decimal(20, 8)
    totalAmount Decimal @db.Decimal(20, 8)

    // Execution details
    filledQuantity Decimal  @default(0.00) @db.Decimal(20, 8)
    filledAmount   Decimal  @default(0.00) @db.Decimal(20, 8)
    executedPrice  Decimal? @db.Decimal(20, 8)

    // Fees (virtual trading fees for realism)
    fee        Decimal @default(0.00) @db.Decimal(20, 8)
    feePercent Decimal @default(0.001) @db.Decimal(5, 4) // 0.1% default

    // Timestamps
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    executedAt  DateTime?
    cancelledAt DateTime?

    // Relations
    user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    wallet VirtualWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)
    crypto Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
    trades Trade[]

    @@map("orders")
}

model Trade {
    id       String @id @default(cuid())
    userId   String
    walletId String
    cryptoId String
    orderId  String

    // Trade details
    type     OrderType // BUY, SELL
    quantity Decimal   @db.Decimal(20, 8)
    price    Decimal   @db.Decimal(20, 8)
    amount   Decimal   @db.Decimal(20, 8)
    fee      Decimal   @db.Decimal(20, 8)

    // Performance (for sells)
    pnl        Decimal? @db.Decimal(20, 8)
    pnlPercent Decimal? @db.Decimal(10, 4)

    // Timestamps
    executedAt DateTime @default(now())
    createdAt  DateTime @default(now())

    // Relations
    user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    wallet VirtualWallet  @relation(fields: [walletId], references: [id], onDelete: Cascade)
    crypto Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
    order  Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)

    @@map("trades")
}

model Portfolio {
    id     String @id @default(cuid())
    userId String

    // Portfolio details
    name        String
    description String?

    // Performance tracking
    totalValue      Decimal @default(0.00) @db.Decimal(20, 8)
    totalPnL        Decimal @default(0.00) @db.Decimal(20, 8)
    totalPnLPercent Decimal @default(0.00) @db.Decimal(10, 4)
    dayPnL          Decimal @default(0.00) @db.Decimal(20, 8)
    dayPnLPercent   Decimal @default(0.00) @db.Decimal(10, 4)

    // Settings
    isPublic Boolean @default(false)
    isActive Boolean @default(true)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("portfolios")
}

model Watchlist {
    id     String @id @default(cuid())
    userId String

    // Watchlist details
    name        String
    description String?
    isDefault   Boolean @default(false)

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    items WatchlistItem[]

    @@map("watchlists")
}

model WatchlistItem {
    id          String @id @default(cuid())
    watchlistId String
    cryptoId    String

    // Alert settings
    priceAlert    Decimal? @db.Decimal(20, 8)
    changeAlert   Decimal? @db.Decimal(10, 4)
    isAlertActive Boolean  @default(false)

    // Timestamps
    createdAt DateTime @default(now())

    // Relations
    watchlist Watchlist      @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
    crypto    Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)

    @@unique([watchlistId, cryptoId])
    @@map("watchlist_items")
}

model PriceHistory {
    id       String @id @default(cuid())
    cryptoId String

    // Price data
    price     Decimal  @db.Decimal(20, 8)
    volume    Decimal? @db.Decimal(30, 2)
    marketCap Decimal? @db.Decimal(30, 2)

    // Timestamp
    timestamp DateTime
    interval  String // 1m, 5m, 1h, 1d, etc.

    // Relations
    crypto Cryptocurrency @relation(fields: [cryptoId], references: [id], onDelete: Cascade)

    @@unique([cryptoId, timestamp, interval])
    @@map("price_history")
}

model ApiKey {
    id     String @id @default(cuid())
    userId String

    // API Key details
    name       String
    key        String  @unique
    secretHash String? // For hmac if needed

    // Permissions
    canRead     Boolean @default(true)
    canTrade    Boolean @default(false)
    canWithdraw Boolean @default(false)

    // Usage tracking
    lastUsedAt DateTime?
    usageCount Int       @default(0)

    // Status
    isActive Boolean @default(true)

    // Expiry
    expiresAt DateTime?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("api_keys")
}

model SystemConfig {
    id    String @id @default(cuid())
    key   String @unique
    value String

    // Metadata
    description String?
    category    String?

    // Timestamps
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("system_config")
}

// Enums
enum OrderType {
    BUY
    SELL
}

enum OrderKind {
    MARKET
    LIMIT
    STOP_LOSS
    TAKE_PROFIT
}

enum OrderStatus {
    PENDING
    PARTIALLY_FILLED
    FILLED
    CANCELLED
    REJECTED
    EXPIRED
}
